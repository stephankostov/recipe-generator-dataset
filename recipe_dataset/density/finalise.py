# AUTOGENERATED! DO NOT EDIT! File to edit: ../../notebooks/06-density-db-finalise.ipynb.

# %% auto 0
__all__ = ['get_gram_weight', 'get_weight_ratio']

# %% ../../notebooks/06-density-db-finalise.ipynb 4
import pandas as pd
import numpy as np

import json

# %% ../../notebooks/06-density-db-finalise.ipynb 10
with open('../config/unit_conversions.json') as f:
    unit_list = json.load(f)

# %% ../../notebooks/06-density-db-finalise.ipynb 15
def get_gram_weight(ingredient):

    weight = 0.0

    if pd.isnull(ingredient['food_id']): return pd.NA
    
    portion = food_portion_df.loc[ingredient['food_id'], ingredient['food_portion_id']]

    for info_object in [ingredient, portion]:
        info_object['unit_types'] = []
        for unit_type in unit_list.keys():
            if any([unit_tag for unit_tag in info_object['unit_tags'] if unit_tag in unit_list[unit_type].keys()]):
                info_object['unit_types'].append(unit_type)

    if 'weight' in ingredient['unit_types']:
        ingredient_weight_unit = [unit for unit in ingredient['unit_tags'] if unit in unit_list['weight'].keys()][0]
        weight = unit_list['weight'][ingredient_weight_unit]['conversion'] * ingredient['quantity']
    elif 'volume' in ingredient['unit_types']:
        ingredient_volume_unit = [unit for unit in ingredient['unit_tags'] if unit in unit_list['volume'].keys()][0]
        if 'volume' in portion['unit_types']:
            portion_volume_unit = [unit for unit in portion['unit_tags'] if unit in unit_list['volume'].keys()][0]
            # simple density calculation if exists
            if not pd.notnull(portion['portion_amount']):
                density = portion['gram_weight'] / (portion['amount'] * unit_list['volume'][portion_volume_unit]['conversion'])
            else:
                density = portion['gram_weight'] / (portion['amount'] * portion['portion_amount'] * unit_list['volume'][portion_volume_unit]['conversion']) #Â #todo can just make porion_amount == 1 or factor this in the amount when creating dataframe
            weight = unit_list['volume'][ingredient_volume_unit]['conversion'] * density * ingredient['quantity']
        else:
            # volume measurement not given -> must be portion (set to NA for now)
            weight = pd.NA
    else: # ingredient whole/portion measurements
        weight = portion['gram_weight'] * ingredient['quantity']


    return weight    

# %% ../../notebooks/06-density-db-finalise.ipynb 27
def get_weight_ratio(ingredient):
    recipe_id = ingredient.name[0]
    recipe_weight = ingredients_df.loc[recipe_id]['gram_weight'].sum()
    return ingredient['gram_weight'] / recipe_weight
