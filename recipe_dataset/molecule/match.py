# AUTOGENERATED! DO NOT EDIT! File to edit: ../../notebooks/09-molecule-db-match.ipynb.

# %% auto 0
__all__ = ['root', 'default_transform', 'fuzzy_search_words', 'find_ingredient_food_df_matches', 'calculate_match_stats',
           'select_from_matches', 'match_ingredient', 'create_na_synonyms_df']

# %% ../../notebooks/09-molecule-db-match.ipynb 5
from pyprojroot import here
root = here()
import sys
sys.path.append(str(root))

# %% ../../notebooks/09-molecule-db-match.ipynb 6
import pandas as pd

from ..density.food_match import *
from ..utils.utils import *
from ..utils.join_utils import *

import json

# %% ../../notebooks/09-molecule-db-match.ipynb 7
with open(f'{root}/config/default_words.json', 'r') as f:
    default_words = json.load(f)['molecule']

with open(f'{root}/config/exclusion_words.json', 'r') as f:
    exclusion_words = json.load(f)['molecule']

# %% ../../notebooks/09-molecule-db-match.ipynb 17
with open(f'{root}/config/molecule/ingredient_transforms.json', 'r') as f:
    default_transforms = json.load(f)

# %% ../../notebooks/09-molecule-db-match.ipynb 18
def default_transform(ingredient):
    for defualt_instance in default_transforms.values():
        if all([key_word in ingredient.values for key_word in defualt_instance['key']]):
            return pd.Series(defualt_instance['value'], dtype='string', name=ingredient.name)
    return ingredient

# %% ../../notebooks/09-molecule-db-match.ipynb 26
def fuzzy_search_words(s, search_word):
    for w in s.split(' '):
        if fuzzy_search(w, search_word, 85):
            return True
    return False

# %% ../../notebooks/09-molecule-db-match.ipynb 29
def find_ingredient_food_df_matches(ingredient, food_names, debug=False):

    ingredient = ingredient[ingredient.notnull()]
    ingredient = ingredient[~ingredient.isin(exclusion_words)]
    ingredient = default_transform(ingredient)
    
    matched_food_df = food_names.copy(deep=True)
    matched_idxs = matched_food_df.index
    found_match = False

    if debug: debug_idxs = {col: {} for col in ingredient.index}

    for search_col, search_word in ingredient.items():
        
        current_matched_idxs = matched_food_df.index[matched_food_df.apply(fuzzy_search_words, args=(search_word,))]

        if debug: debug_idxs[search_col] = {'value': search_word, 'size': len(current_matched_idxs), 'idxs': {'matched': current_matched_idxs, 'selected': []}}

        if not current_matched_idxs.empty:
            matched_idxs = current_matched_idxs
            found_match = True
        else:
            if not search_col.startswith('name.name.nouns'):
                pass

        matched_food_df = matched_food_df.loc[matched_idxs]

        if debug: debug_idxs[search_col]['idxs']['selected'] = matched_idxs

    if not found_match: matched_idxs = []
    
    if debug:
        return matched_idxs, debug_idxs
    else:
        return matched_idxs

# %% ../../notebooks/09-molecule-db-match.ipynb 33
def calculate_match_stats(match_string, ingredient_values):

    match_words = match_string.split(' ')

    match_position = 99
    match_count = 0
    whole_match_count = 0
    word_count = 99
    default_word_count = 0
    exclusion_word_count = 0

    for i, match_word in enumerate(match_words):
        if any([fuzzy_search(match_word, ingredient_value) for ingredient_value in ingredient_values]):
            match_position = i
        match_count += len([ingredient_value for ingredient_value in ingredient_values if fuzzy_search(match_word, ingredient_value)])
        whole_match_count += len([ingredient_value for ingredient_value in ingredient_values if contains_whole_word(match_word, ingredient_value)])
        if match_word in default_words: default_word_count += 1
        if match_word in exclusion_words: exclusion_word_count += 1

    word_count = len(match_words) - default_word_count
    
    return (
        whole_match_count,
        match_count,
        match_position,
        default_word_count,
        word_count,
    )

# %% ../../notebooks/09-molecule-db-match.ipynb 34
def select_from_matches(ingredient, matched_df_names, return_df=False):

    # since we don't have any rubbish foods here, we can include all search terms of the ingredient
    ingredient_cols = ingredient.index[ingredient.notnull()]
    ingredient_values = ingredient[ingredient_cols].values

    matched_df = matched_df_names.to_frame('name')

    matched_df['whole_match_count'], \
    matched_df['match_count'], \
    matched_df['match_position'], \
    matched_df['default_word_count'], \
    matched_df['word_count'] = zip(*matched_df['name'].apply(calculate_match_stats, args=(ingredient_values,)))

    matched_df = matched_df.sort_values(
        ['whole_match_count',
         'match_count',
         'match_position',
         'word_count',
         'default_word_count',
         'id'],
        ascending = [
            False,
            False,
            True,
            True,
            False,
            True
        ]
    )

    if return_df:
        return matched_df
    else:
        return matched_df.iloc[0].name if not matched_df.empty else pd.NA

# %% ../../notebooks/09-molecule-db-match.ipynb 36
def match_ingredient(ingredient, food_names):
    matched_names = food_names.loc[find_ingredient_food_df_matches(ingredient, food_names)]
    if matched_names.empty: return pd.NA
    selected_idx = select_from_matches(ingredient, matched_names)
    return selected_idx

# %% ../../notebooks/09-molecule-db-match.ipynb 45
def create_na_synonyms_df(na_expanded_ingredients_df):

    na_synonyms_df = na_expanded_ingredients_df.copy(deep=True)

    for col in na_synonyms_df.columns:
        na_synonyms_df[col] = na_synonyms_df[col].apply(find_alt_words)

    na_synonyms_df = na_synonyms_df.map(lambda x: [] if not isinstance(x, list) else x)

    for col in na_synonyms_df.columns:
        expanded = pd.DataFrame(na_synonyms_df[col].tolist(), index=na_synonyms_df.index)
        expanded.columns = [col + '.' + str(c) for c in expanded.columns]
        na_synonyms_df = na_synonyms_df.join(expanded)
        na_synonyms_df.drop(columns=[col], inplace=True)

    return na_synonyms_df
